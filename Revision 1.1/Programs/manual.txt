-------------------------------------------------
M I N I M A L  6 4 x 4  COMPUTER  MANUAL  by slu4
-------------------------------------------------

Welcome to the 'MINIMAL 64x4'. This file provides
a brief introduction on how to use this computer.

1. OS COMMANDS (1/2)

The  'MinOS'  operating system loads and executes
any entered  filename as a  separate program.  So
any file can be considered an 'OS command'. MinOS
comes with the following built-in commands
(parameters in square [] brackets are optional):

'run'  [<x>] starts execution at hex address <x>.
  Default start address is 0x0100.

'dir' displays the file directory of the SSD.

'del <file>' deletes a file on the SSD.

'show <file>'  displays a text file page by page.

'format'  formats  SSD  user area (banks 3..127).

'defrag'  frees up unused  SSD storage fragments.

'memset <x> <y> <d>' fills RAM <x>..<y> with <d>.%
1. OS COMMANDS (2/2)

'mon [<x>]'  starts  a  memory  monitor [at <x>].
  ESC        exits the monitor to the  OS prompt.
  <x>        changes the  monitor address to <x>.
  [<x>].<y>  displays an address range.
  :<d>[ <d>] deposits  <d> at  current address++.
  #<x>       activates SSD bank <x>, 0x80 for RAM
  <x>, <y>, <d> can be a HEX value '0' to 'ffff'.

'memmove <x> <y> <z>'  moves memory area <x>..<y>
  to <z>. Source and destination may overlap.

'receive'  receives an 'Intel HEX File' you paste
  via UART terminal and writes the data into RAM.
  OS FLASH images generated by  'asm os.asm'  are
  automatically detected and written 'in situ' to
  the FLASH sectors 0..2.

'save <x> <y> <name>'  saves memory area <x>..<y>
  under the filename <name> onto the SSD.

'clear'  clears the screen%
2. MEMORY MAP

0x0000..0x0fff  4KB FLASH/RAM  depending on bank:
                0: OS kernel & API image
                1: OS data (charset, tables)
                2: OS command files
                3..127: SSD file storage
                >= 128: RAM (FLASH disabled)

0x0000..  00ff ZERO PAGE (256 bytes):
  0080..  00ff OS variables
  00cd..  00fe 50 bytes OS line input buffer
  00ff         system register

0x0000..0x3fff 16KB RAM:
  0100..  0fff text editor 'edit'
  1000..  1fff smart assembler 'asm'
  1000..  3fff high-level language 'min'

0x4000..0x7fff 16KB VIDEO RAM (64 x 256 bytes):
  430c         start of 400 x 240 pixels viewport

0x8000..0xefff 28KB RAM:
  f000..  fbff OS kernel & API functions
  fc00..  fdff OS commands
  fe00..  feff reserved for expansion cards

0xff00..0xffff CPU STACK (256 bytes):
  ffff         stack pointer LSB%
3. TEXT EDITOR 'edit [<file>]'

The  text  editor  resides  in RAM 0x0100..0x0fff
and also uses  0x3f00..0x3fff for temporary data.
Text data  is stored from address 0x8000 onwards.
Once  loaded,  the  editor  can  be  restarted by
typing 'run', preserving your text document.

CTRL q   or ESC quits the editor.
CTRL n   Starts a new document.

CTRL l   Dialog line to input a filename to load.
CTRL s   Dialog line to  save the text as a file.

CTRL a  Marks the start of a text block.
CTRL x  Marks the end of a  text blocks  and cuts
        out the  marked text block to  clipboard.
CTRL c  Marks the end of a text block  and copies
        the marked text block to clipboard.
CTRL v  Inserts  a text block  from  clipboard at
        the current cursor position.

CTRL r  Receives text via UART and  inserts it at
        the current position.  Press  ESC to end.
CTRL t  Transmits the current text file via UART.%
4. ASSEMBLER 'asm [<file>]' (1/2)

ASM  is MINIMAL's  native assembler.  To assemble
a sourcefile <file> from SSD, type  'asm <file>'.
In case  the source text  already resides  in RAM
you can simply assemble with 'asm'.  ASM uses the
RAM  area  0x1000..0x1fff.

ASM uses two pointers: a memory counter (MC)  and
a program counter (PC).  Data is  always  emitted
to MC. Labels  are  defined  with respect to  PC.
Default for MC and PC is address 0x2000.

#emit       starts data emission to MC
#mute       mutes data emission to MC, but
            keeps  updating  PC while  assembling
*           alias for  current  MC  address value
#org <addr> sets PC,  sets MC  only when emitting
#page       alligns PC (MC) to the next page

Mnemonics and HEX digits are not case-sensitive.
Separate  elements with  a space  and/or comma.%
4. ASSEMBLER 'asm [<file>]' (2/2)

label:      defines a label as the current PC
; comment   makes  the rest of the line a comment
<label      LSB operator  (at element start only)
>label      MSB operator  (at element start only)
0x0a,123    HEX and DEC byte values
0xff10      HEX word (little-endian) = 0x10, 0xff
'A'         character,  equivalent  to 65 or 0x41
'AAA',0     string,  equivalent to  65, 65, 65, 0
addr+off-1  handling of simple expressions
*           alias for the value of current MC

Example:
#org 0x2000             ; sets start address
            LDI 0xff    ; loads 0xff into A
            STB 0x430c  ; deposits A=0xff in VRAM
            JPA 0xf003  ; jumps back to OS prompt%
5. HIGH-LEVEL LANGUAGE 'min [<file>]'

MIN is a fast high-level Python-like interpreted
programming language. 'min <file>' executes your
program from SSD. 'min' starts a program already
located at 0x1000.
MIN occupies the RAM area 0x1000..0x2dff and uses
0x2e00..0x3fff for runtime data storage.

The following list of features and commands will
get you started (for more information see the
exact language definition in EBNF):

o Python-style code block indentation (2 SPACES)
o control structure 'if-elif-else', 'while-break'
o variables with C-style static explicit typing
o data types 'char' (8-bit) and 'int' (16-bit)
o local and global variables, @ address operator
o 'def-return', C-style '&' variable references
o 'call ..' for assembly/API routine integration
o full expression handling including '+=', '-='
o bitwise/logical operators 'and/or/xor/not'
o [..|..] element access and '_' concatenation
o decimal and HEX '0xffff' numbers, ".." strings
o print(..) for text and decimal number output
o 'use "<library>"' for recursive file import
o 'std.min' library implements: pos, rnd, clear,
   line, rect, dot, str, len, strcmp, key, etc.%
6. HARDWARE SPECIFICATION

CPU system clock rate........................8MHz

Supply voltage range.................4.5V to 5.5V

Supply current.......................220mA @ 5.0V

UART bit rate.............................500Kbps

UART format 1 start bit, 8 data bits, 2 stop bits
            no parity bit, newline LF (0x0a)

UART transmit delay.....................10ms/line

Set the terminal emulation to 50 x 30 characters.



                    Have fun!%