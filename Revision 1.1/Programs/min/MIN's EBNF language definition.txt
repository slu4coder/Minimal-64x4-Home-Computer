---------------------------------------------------------------------------------------
Extended Backus-Naur-Form (EBNF) of MIN written by Carsten Herting (slu4) Mar 17th 2023
---------------------------------------------------------------------------------------

letter      = 'a' | ... | 'z' | 'A' | ... | 'Z'
digit       = '0' | ... | '9'
hexdigit    = digit | 'a' | ... | 'f'
rel-op      = '==' | '!=' | '<=' | '<' | '>=' | '>'
add-op      = '+'  | '-'
mul-op      = '*'  | '/'
logic-op    = 'and' | 'or' | 'xor' | '>>' | '<<'
type        = 'int' | 'char'
identifier  = letter, { letter | digit }
character   = ? any ASCII character ?
NEWLINE     = '\n'
ENDMARKER   = '\0'
IND++       = ? increase target indentation (start with -1) ?
IND--       = ? decrease target indentation (start with -1) ?
NOIND       = ? check if indentation equals zero ?
EQIND       = ? check if indentation equals target ?

program     = { statement }, ENDMARKER
block       = simple-line
            | NEWLINE, IND++, { statement }, IND--
statement   = { NEWLINE }, EQIND, simple-line
            |   { NEWLINE }, EQIND, 'if', expr, [':'], block,
              { { NEWLINE }, EQIND, 'elif', expr, [':'], block },
              [ { NEWLINE }, EQIND, 'else', [':'], block ]
            | { NEWLINE }, EQIND, 'while', expr, [':'], block
            | { NEWLINE }, NOIND, 'def', identifier, '(', { type, ['&'], identifier, [','] }, ')', [':'], block
            | { NEWLINE }, NOIND, 'use', '"', { character }, '"'          (* import another file*)
simple-line = simple-stmt, [';'], { simple-stmt, [';'] }
simple-stmt = type, identifier, ['@', expr ], ['=', comp-expr ]           (* variable definition *)
            | identifier, ['[', expr, ']'], '=', comp-expr                (* assignment *)
            | identifier, ['[', expr, ']'], '+=', constant                (* fast add *)
            | identifier, ['[', expr, ']'], '-=', constant                (* fast sub *)
            | identifier, '(', { comp-expr, [','] }, ')'                  (* function call *)
            | 'return', [ comp-expr ]
            | 'break'
            | 'call', '(', factor, [','], factor, ')'                     (* only available on MINIMAL 64 *)
            | 'print', '(', { comp-expr, [','] }, ')'

constant    '0x', hexdigit, { hexdigit }                                  (* int HEX number *)
            | digit, { digit }                                            (* int DEC number *)
factor      = constant
            | '(', expr, ')'                                              (* result of braced expression *)
            | 'key', '(', ')'                                             (* MINIMAL 64 uses API function instead *)
            | '"', { character }, '"'                                     (* char string *)
            | ['&'], identifier, ['[', [ expr ], ['|', [ expr ] ], ']']   (* [address of] variable [elements] *)
            | identifier, '(', { comp-expr, [','] }, ')'                  (* return value of function call *)
term        = factor, { mul-op, factor }
base-expr   = ['-'], term, { add-op, term }
rel-expr    = base-expr, { rel-op, base-expr }
expr        = ['not'], rel-expr, { logic-op, rel-expr }
comp-expr   = expr, {'_', expr }                                          (* compound expressions of same data type *)
